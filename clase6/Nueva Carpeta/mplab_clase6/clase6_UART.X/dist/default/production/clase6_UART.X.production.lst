

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Nov 21 19:35:04 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F2450
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=1
    10                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    11                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    14  0000                     
    15                           ; Version 2.40
    16                           ; Generated 17/11/2021 GMT
    17                           ; 
    18                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC18F2450 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     _TXSTAbits	set	4012
    51  0000                     _BAUDCONbits	set	4024
    52  0000                     _TRISCbits	set	3988
    53  0000                     _RCSTA	set	4011
    54  0000                     _TXSTA	set	4012
    55  0000                     _TXREG	set	4013
    56  0000                     _SPBRG	set	4015
    57  0000                     _BAUDCON	set	4024
    58  0000                     _ADCON1bits	set	4033
    59  0000                     _SPBRGH	set	4016
    60                           
    61                           	psect	smallconst
    62  000500                     __psmallconst:
    63                           	callstack 0
    64  000500  00                 	db	0
    65  000501                     STR_7:
    66  000501  48                 	db	72	;'H'
    67  000502  6F                 	db	111	;'o'
    68  000503  6C                 	db	108	;'l'
    69  000504  61                 	db	97	;'a'
    70  000505  20                 	db	32
    71  000506  4D                 	db	77	;'M'
    72  000507  75                 	db	117	;'u'
    73  000508  6E                 	db	110	;'n'
    74  000509  64                 	db	100	;'d'
    75  00050A  6F                 	db	111	;'o'
    76  00050B  0A                 	db	10
    77  00050C  0D                 	db	13
    78  00050D  00                 	db	0
    79  00050E                     STR_5:
    80  00050E  0A                 	db	10
    81  00050F  00                 	db	0
    82  000510                     STR_4:
    83  000510  41                 	db	65	;'A'
    84  000511  00                 	db	0
    85  000512                     STR_1:
    86  000512  48                 	db	72	;'H'
    87  000513  00                 	db	0
    88  000514                     STR_3:
    89  000514  4C                 	db	76	;'L'
    90  000515  00                 	db	0
    91  000516                     STR_2:
    92  000516  4F                 	db	79	;'O'
    93  000517  00                 	db	0
    94  000518  00                 	db	0	; dummy byte at the end
    95  0000                     
    96                           ; #config settings
    97                           
    98                           	psect	cinit
    99  000784                     __pcinit:
   100                           	callstack 0
   101  000784                     start_initialization:
   102                           	callstack 0
   103  000784                     __initialization:
   104                           	callstack 0
   105  000784                     end_of_initialization:
   106                           	callstack 0
   107  000784                     __end_of__initialization:
   108                           	callstack 0
   109  000784  0E00               	movlw	low (__Lsmallconst shr (0+16))
   110  000786  6EF8               	movwf	tblptru,c
   111  000788  0E05               	movlw	high __Lsmallconst
   112  00078A  6EF7               	movwf	tblptrh,c
   113  00078C  0100               	movlb	0
   114  00078E  EF8D  F002         	goto	_main	;jump to C main() function
   115                           
   116                           	psect	cstackCOMRAM
   117  000001                     __pcstackCOMRAM:
   118                           	callstack 0
   119  000001                     ?___aldiv:
   120                           	callstack 0
   121  000001                     ___aldiv@dividend:
   122                           	callstack 0
   123                           
   124                           ; 4 bytes @ 0x0
   125  000001                     	ds	4
   126  000005                     ___aldiv@divisor:
   127                           	callstack 0
   128                           
   129                           ; 4 bytes @ 0x4
   130  000005                     	ds	4
   131  000009                     ___aldiv@counter:
   132                           	callstack 0
   133                           
   134                           ; 1 bytes @ 0x8
   135  000009                     	ds	1
   136  00000A                     ___aldiv@sign:
   137                           	callstack 0
   138                           
   139                           ; 1 bytes @ 0x9
   140  00000A                     	ds	1
   141  00000B                     ___aldiv@quotient:
   142                           	callstack 0
   143                           
   144                           ; 4 bytes @ 0xA
   145  00000B                     	ds	4
   146  00000F                     ??_main:
   147                           
   148                           ; 1 bytes @ 0xE
   149  00000F                     	ds	2
   150  000011                     main@baud_desaired:
   151                           	callstack 0
   152                           
   153                           ; 2 bytes @ 0x10
   154  000011                     	ds	2
   155  000013                     main@caract_1:
   156                           	callstack 0
   157                           
   158                           ; 2 bytes @ 0x12
   159  000013                     	ds	2
   160  000015                     main@caract_2:
   161                           	callstack 0
   162                           
   163                           ; 2 bytes @ 0x14
   164  000015                     	ds	2
   165  000017                     main@caract_3:
   166                           	callstack 0
   167                           
   168                           ; 2 bytes @ 0x16
   169  000017                     	ds	2
   170  000019                     main@caract_4:
   171                           	callstack 0
   172                           
   173                           ; 2 bytes @ 0x18
   174  000019                     	ds	2
   175  00001B                     main@caract_5:
   176                           	callstack 0
   177                           
   178                           ; 2 bytes @ 0x1A
   179  00001B                     	ds	2
   180  00001D                     main@caract_6:
   181                           	callstack 0
   182                           
   183                           ; 2 bytes @ 0x1C
   184  00001D                     	ds	2
   185  00001F                     main@baud_rate:
   186                           	callstack 0
   187                           
   188                           ; 2 bytes @ 0x1E
   189  00001F                     	ds	2
   190                           
   191 ;;
   192 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   193 ;;
   194 ;; *************** function _main *****************
   195 ;; Defined at:
   196 ;;		line 102 in file "main.c"
   197 ;; Parameters:    Size  Location     Type
   198 ;;		None
   199 ;; Auto vars:     Size  Location     Type
   200 ;;  mensaje         2    0        PTR unsigned char 
   201 ;;		 -> STR_7(13), 
   202 ;;  baud_rate       2   30[COMRAM] unsigned short 
   203 ;;  caract_6        2   28[COMRAM] PTR unsigned char 
   204 ;;		 -> STR_6(2), 
   205 ;;  caract_5        2   26[COMRAM] PTR unsigned char 
   206 ;;		 -> STR_5(2), 
   207 ;;  caract_4        2   24[COMRAM] PTR unsigned char 
   208 ;;		 -> STR_4(2), 
   209 ;;  caract_3        2   22[COMRAM] PTR unsigned char 
   210 ;;		 -> STR_3(2), 
   211 ;;  caract_2        2   20[COMRAM] PTR unsigned char 
   212 ;;		 -> STR_2(2), 
   213 ;;  caract_1        2   18[COMRAM] PTR unsigned char 
   214 ;;		 -> STR_1(2), 
   215 ;;  baud_desaire    2   16[COMRAM] unsigned short 
   216 ;; Return value:  Size  Location     Type
   217 ;;                  1    wreg      void 
   218 ;; Registers used:
   219 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   220 ;; Tracked objects:
   221 ;;		On entry : 0/0
   222 ;;		On exit  : 0/0
   223 ;;		Unchanged: 0/0
   224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
   225 ;;      Params:         0       0       0       0
   226 ;;      Locals:        16       0       0       0
   227 ;;      Temps:          2       0       0       0
   228 ;;      Totals:        18       0       0       0
   229 ;;Total ram usage:       18 bytes
   230 ;; Hardware stack levels required when called: 1
   231 ;; This function calls:
   232 ;;		___aldiv
   233 ;; This function is called by:
   234 ;;		Startup code after reset
   235 ;; This function uses a non-reentrant model
   236 ;;
   237                           
   238                           	psect	text0
   239  00051A                     __ptext0:
   240                           	callstack 0
   241  00051A                     _main:
   242                           	callstack 30
   243  00051A                     
   244                           ;main.c: 106:     ADCON1bits.PCFG = 0b1111;
   245  00051A  0E0F               	movlw	15
   246  00051C  12C1               	iorwf	193,f,c	;volatile
   247  00051E                     
   248                           ;main.c: 110:     TRISCbits.RC6 = 0;
   249  00051E  9C94               	bcf	148,6,c	;volatile
   250  000520                     
   251                           ;main.c: 111:     TRISCbits.RC7 = 1;
   252  000520  8E94               	bsf	148,7,c	;volatile
   253                           
   254                           ;main.c: 114:     TXSTA = 0b00100100;
   255  000522  0E24               	movlw	36
   256  000524  6EAC               	movwf	172,c	;volatile
   257                           
   258                           ;main.c: 117:     RCSTA = 0b10010000;
   259  000526  0E90               	movlw	144
   260  000528  6EAB               	movwf	171,c	;volatile
   261                           
   262                           ;main.c: 120:     BAUDCON = 0b00000000;
   263  00052A  0E00               	movlw	0
   264  00052C  6EB8               	movwf	184,c	;volatile
   265  00052E                     
   266                           ;main.c: 121:     BAUDCONbits.BRG16 = 1;
   267  00052E  86B8               	bsf	184,3,c	;volatile
   268                           
   269                           ;main.c: 122:     uint16_t baud_desaired = 9600;
   270  000530  0E25               	movlw	37
   271  000532  6E12               	movwf	(main@baud_desaired+1)^0,c
   272  000534  0E80               	movlw	128
   273  000536  6E11               	movwf	main@baud_desaired^0,c
   274  000538                     
   275                           ;main.c: 123:     uint16_t baud_rate = (4000000/(baud_desaired*4))-1;
   276  000538  0E00               	movlw	0
   277  00053A  6E01               	movwf	___aldiv@dividend^0,c
   278  00053C  0E09               	movlw	9
   279  00053E  6E02               	movwf	(___aldiv@dividend+1)^0,c
   280  000540  0E3D               	movlw	61
   281  000542  6E03               	movwf	(___aldiv@dividend+2)^0,c
   282  000544  0E00               	movlw	0
   283  000546  6E04               	movwf	(___aldiv@dividend+3)^0,c
   284  000548  C011  F00F         	movff	main@baud_desaired,??_main
   285  00054C  C012  F010         	movff	main@baud_desaired+1,??_main+1
   286  000550  90D8               	bcf	status,0,c
   287  000552  360F               	rlcf	??_main^0,f,c
   288  000554  3610               	rlcf	(??_main+1)^0,f,c
   289  000556  90D8               	bcf	status,0,c
   290  000558  360F               	rlcf	??_main^0,f,c
   291  00055A  3610               	rlcf	(??_main+1)^0,f,c
   292  00055C  C00F  F005         	movff	??_main,___aldiv@divisor
   293  000560  C010  F006         	movff	??_main+1,___aldiv@divisor+1
   294  000564  6A07               	clrf	(___aldiv@divisor+2)^0,c
   295  000566  6A08               	clrf	(___aldiv@divisor+3)^0,c
   296  000568  EC3C  F003         	call	___aldiv	;wreg free
   297  00056C  0EFF               	movlw	255
   298  00056E  2401               	addwf	?___aldiv^0,w,c
   299  000570  6E1F               	movwf	main@baud_rate^0,c
   300  000572  0EFF               	movlw	255
   301  000574  2002               	addwfc	(?___aldiv+1)^0,w,c
   302  000576  6E20               	movwf	(main@baud_rate+1)^0,c
   303  000578                     
   304                           ;main.c: 124:     SPBRG = baud_rate & 0x00FF;
   305  000578  C01F  FFAF         	movff	main@baud_rate,4015	;volatile
   306  00057C                     
   307                           ;main.c: 125:     SPBRGH = baud_rate >> 8;
   308  00057C  5020               	movf	(main@baud_rate+1)^0,w,c
   309  00057E  6EB0               	movwf	176,c	;volatile
   310  000580                     
   311                           ;main.c: 127:     char * caract_1 = "H";
   312  000580  0E12               	movlw	low STR_1
   313  000582  6E13               	movwf	main@caract_1^0,c
   314  000584  0E05               	movlw	high STR_1
   315  000586  6E14               	movwf	(main@caract_1+1)^0,c
   316  000588                     
   317                           ;main.c: 128:     char * caract_2 = "O";
   318  000588  0E16               	movlw	low STR_2
   319  00058A  6E15               	movwf	main@caract_2^0,c
   320  00058C  0E05               	movlw	high STR_2
   321  00058E  6E16               	movwf	(main@caract_2+1)^0,c
   322  000590                     
   323                           ;main.c: 129:     char * caract_3 = "L";
   324  000590  0E14               	movlw	low STR_3
   325  000592  6E17               	movwf	main@caract_3^0,c
   326  000594  0E05               	movlw	high STR_3
   327  000596  6E18               	movwf	(main@caract_3+1)^0,c
   328  000598                     
   329                           ;main.c: 130:     char * caract_4 = "A";
   330  000598  0E10               	movlw	low STR_4
   331  00059A  6E19               	movwf	main@caract_4^0,c
   332  00059C  0E05               	movlw	high STR_4
   333  00059E  6E1A               	movwf	(main@caract_4+1)^0,c
   334  0005A0                     
   335                           ;main.c: 131:     char * caract_5 = "\n";
   336  0005A0  0E0E               	movlw	low STR_5
   337  0005A2  6E1B               	movwf	main@caract_5^0,c
   338  0005A4  0E05               	movlw	high STR_5
   339  0005A6  6E1C               	movwf	(main@caract_5+1)^0,c
   340  0005A8                     
   341                           ;main.c: 132:     char * caract_6 = "\r";
   342  0005A8  0E0C               	movlw	low (STR_7+11)
   343  0005AA  6E1D               	movwf	main@caract_6^0,c
   344  0005AC  0E05               	movlw	high (STR_7+11)
   345  0005AE  6E1E               	movwf	(main@caract_6+1)^0,c
   346  0005B0                     l40:
   347  0005B0  A2AC               	btfss	172,1,c	;volatile
   348  0005B2  EFDD  F002         	goto	u211
   349  0005B6  EFDF  F002         	goto	u210
   350  0005BA                     u211:
   351  0005BA  EFD8  F002         	goto	l40
   352  0005BE                     u210:
   353  0005BE                     
   354                           ;main.c: 137:         TXREG = *caract_1;
   355  0005BE  C013  FFF6         	movff	main@caract_1,tblptrl
   356  0005C2  C014  FFF7         	movff	main@caract_1+1,tblptrh
   357  0005C6                     	if	0	;tblptru may be non-zero
   358  0005C6                     	endif
   359  0005C6                     	if	0	;tblptru may be non-zero
   360  0005C6                     	endif
   361  0005C6  0008               	tblrd		*
   362  0005C8  CFF5 FFAD          	movff	tablat,4013	;volatile
   363  0005CC                     l43:
   364  0005CC  A2AC               	btfss	172,1,c	;volatile
   365  0005CE  EFEB  F002         	goto	u221
   366  0005D2  EFED  F002         	goto	u220
   367  0005D6                     u221:
   368  0005D6  EFE6  F002         	goto	l43
   369  0005DA                     u220:
   370  0005DA                     
   371                           ;main.c: 140:         TXREG = *caract_2;
   372  0005DA  C015  FFF6         	movff	main@caract_2,tblptrl
   373  0005DE  C016  FFF7         	movff	main@caract_2+1,tblptrh
   374  0005E2                     	if	0	;tblptru may be non-zero
   375  0005E2                     	endif
   376  0005E2                     	if	0	;tblptru may be non-zero
   377  0005E2                     	endif
   378  0005E2  0008               	tblrd		*
   379  0005E4  CFF5 FFAD          	movff	tablat,4013	;volatile
   380  0005E8                     l46:
   381  0005E8  A2AC               	btfss	172,1,c	;volatile
   382  0005EA  EFF9  F002         	goto	u231
   383  0005EE  EFFB  F002         	goto	u230
   384  0005F2                     u231:
   385  0005F2  EFF4  F002         	goto	l46
   386  0005F6                     u230:
   387  0005F6                     
   388                           ;main.c: 143:         TXREG = *caract_3;
   389  0005F6  C017  FFF6         	movff	main@caract_3,tblptrl
   390  0005FA  C018  FFF7         	movff	main@caract_3+1,tblptrh
   391  0005FE                     	if	0	;tblptru may be non-zero
   392  0005FE                     	endif
   393  0005FE                     	if	0	;tblptru may be non-zero
   394  0005FE                     	endif
   395  0005FE  0008               	tblrd		*
   396  000600  CFF5 FFAD          	movff	tablat,4013	;volatile
   397  000604                     l49:
   398  000604  A2AC               	btfss	172,1,c	;volatile
   399  000606  EF07  F003         	goto	u241
   400  00060A  EF09  F003         	goto	u240
   401  00060E                     u241:
   402  00060E  EF02  F003         	goto	l49
   403  000612                     u240:
   404  000612                     
   405                           ;main.c: 146:         TXREG = *caract_4;
   406  000612  C019  FFF6         	movff	main@caract_4,tblptrl
   407  000616  C01A  FFF7         	movff	main@caract_4+1,tblptrh
   408  00061A                     	if	0	;tblptru may be non-zero
   409  00061A                     	endif
   410  00061A                     	if	0	;tblptru may be non-zero
   411  00061A                     	endif
   412  00061A  0008               	tblrd		*
   413  00061C  CFF5 FFAD          	movff	tablat,4013	;volatile
   414  000620                     l52:
   415  000620  A2AC               	btfss	172,1,c	;volatile
   416  000622  EF15  F003         	goto	u251
   417  000626  EF17  F003         	goto	u250
   418  00062A                     u251:
   419  00062A  EF10  F003         	goto	l52
   420  00062E                     u250:
   421  00062E                     
   422                           ;main.c: 149:         TXREG = *caract_5;
   423  00062E  C01B  FFF6         	movff	main@caract_5,tblptrl
   424  000632  C01C  FFF7         	movff	main@caract_5+1,tblptrh
   425  000636                     	if	0	;tblptru may be non-zero
   426  000636                     	endif
   427  000636                     	if	0	;tblptru may be non-zero
   428  000636                     	endif
   429  000636  0008               	tblrd		*
   430  000638  CFF5 FFAD          	movff	tablat,4013	;volatile
   431  00063C                     l55:
   432  00063C  A2AC               	btfss	172,1,c	;volatile
   433  00063E  EF23  F003         	goto	u261
   434  000642  EF25  F003         	goto	u260
   435  000646                     u261:
   436  000646  EF1E  F003         	goto	l55
   437  00064A                     u260:
   438  00064A                     
   439                           ;main.c: 152:         TXREG = *caract_6;
   440  00064A  C01D  FFF6         	movff	main@caract_6,tblptrl
   441  00064E  C01E  FFF7         	movff	main@caract_6+1,tblptrh
   442  000652                     	if	0	;tblptru may be non-zero
   443  000652                     	endif
   444  000652                     	if	0	;tblptru may be non-zero
   445  000652                     	endif
   446  000652  0008               	tblrd		*
   447  000654  CFF5 FFAD          	movff	tablat,4013	;volatile
   448  000658                     
   449                           ;main.c: 154:         _delay((unsigned long)((200)*(4000000/4000.0)));
   450  000658  0E02               	movlw	2
   451  00065A  6E10               	movwf	(??_main+1)^0,c
   452  00065C  0E04               	movlw	4
   453  00065E  6E0F               	movwf	??_main^0,c
   454  000660  0EBA               	movlw	186
   455  000662                     u277:
   456  000662  2EE8               	decfsz	wreg,f,c
   457  000664  D7FE               	bra	u277
   458  000666  2E0F               	decfsz	??_main^0,f,c
   459  000668  D7FC               	bra	u277
   460  00066A  2E10               	decfsz	(??_main+1)^0,f,c
   461  00066C  D7FA               	bra	u277
   462  00066E  D000               	nop2	
   463  000670  EFD8  F002         	goto	l40
   464  000674  EF00  F000         	goto	start
   465  000678                     __end_of_main:
   466                           	callstack 0
   467                           
   468 ;; *************** function ___aldiv *****************
   469 ;; Defined at:
   470 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\aldiv.c"
   471 ;; Parameters:    Size  Location     Type
   472 ;;  dividend        4    0[COMRAM] long 
   473 ;;  divisor         4    4[COMRAM] long 
   474 ;; Auto vars:     Size  Location     Type
   475 ;;  quotient        4   10[COMRAM] long 
   476 ;;  sign            1    9[COMRAM] unsigned char 
   477 ;;  counter         1    8[COMRAM] unsigned char 
   478 ;; Return value:  Size  Location     Type
   479 ;;                  4    0[COMRAM] long 
   480 ;; Registers used:
   481 ;;		wreg, status,2, status,0
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
   487 ;;      Params:         8       0       0       0
   488 ;;      Locals:         6       0       0       0
   489 ;;      Temps:          0       0       0       0
   490 ;;      Totals:        14       0       0       0
   491 ;;Total ram usage:       14 bytes
   492 ;; Hardware stack levels used: 1
   493 ;; This function calls:
   494 ;;		Nothing
   495 ;; This function is called by:
   496 ;;		_main
   497 ;;		_uartConfig
   498 ;; This function uses a non-reentrant model
   499 ;;
   500                           
   501                           	psect	text1
   502  000678                     __ptext1:
   503                           	callstack 0
   504  000678                     ___aldiv:
   505                           	callstack 30
   506  000678  0E00               	movlw	0
   507  00067A  6E0A               	movwf	___aldiv@sign^0,c
   508  00067C  BE08               	btfsc	(___aldiv@divisor+3)^0,7,c
   509  00067E  EF45  F003         	goto	u150
   510  000682  EF43  F003         	goto	u151
   511  000686                     u151:
   512  000686  EF4F  F003         	goto	l850
   513  00068A                     u150:
   514  00068A  1E08               	comf	(___aldiv@divisor+3)^0,f,c
   515  00068C  1E07               	comf	(___aldiv@divisor+2)^0,f,c
   516  00068E  1E06               	comf	(___aldiv@divisor+1)^0,f,c
   517  000690  6C05               	negf	___aldiv@divisor^0,c
   518  000692  0E00               	movlw	0
   519  000694  2206               	addwfc	(___aldiv@divisor+1)^0,f,c
   520  000696  2207               	addwfc	(___aldiv@divisor+2)^0,f,c
   521  000698  2208               	addwfc	(___aldiv@divisor+3)^0,f,c
   522  00069A  0E01               	movlw	1
   523  00069C  6E0A               	movwf	___aldiv@sign^0,c
   524  00069E                     l850:
   525  00069E  BE04               	btfsc	(___aldiv@dividend+3)^0,7,c
   526  0006A0  EF56  F003         	goto	u160
   527  0006A4  EF54  F003         	goto	u161
   528  0006A8                     u161:
   529  0006A8  EF60  F003         	goto	l856
   530  0006AC                     u160:
   531  0006AC  1E04               	comf	(___aldiv@dividend+3)^0,f,c
   532  0006AE  1E03               	comf	(___aldiv@dividend+2)^0,f,c
   533  0006B0  1E02               	comf	(___aldiv@dividend+1)^0,f,c
   534  0006B2  6C01               	negf	___aldiv@dividend^0,c
   535  0006B4  0E00               	movlw	0
   536  0006B6  2202               	addwfc	(___aldiv@dividend+1)^0,f,c
   537  0006B8  2203               	addwfc	(___aldiv@dividend+2)^0,f,c
   538  0006BA  2204               	addwfc	(___aldiv@dividend+3)^0,f,c
   539  0006BC  0E01               	movlw	1
   540  0006BE  1A0A               	xorwf	___aldiv@sign^0,f,c
   541  0006C0                     l856:
   542  0006C0  0E00               	movlw	0
   543  0006C2  6E0B               	movwf	___aldiv@quotient^0,c
   544  0006C4  0E00               	movlw	0
   545  0006C6  6E0C               	movwf	(___aldiv@quotient+1)^0,c
   546  0006C8  0E00               	movlw	0
   547  0006CA  6E0D               	movwf	(___aldiv@quotient+2)^0,c
   548  0006CC  0E00               	movlw	0
   549  0006CE  6E0E               	movwf	(___aldiv@quotient+3)^0,c
   550  0006D0  5005               	movf	___aldiv@divisor^0,w,c
   551  0006D2  1006               	iorwf	(___aldiv@divisor+1)^0,w,c
   552  0006D4  1007               	iorwf	(___aldiv@divisor+2)^0,w,c
   553  0006D6  1008               	iorwf	(___aldiv@divisor+3)^0,w,c
   554  0006D8  B4D8               	btfsc	status,2,c
   555  0006DA  EF71  F003         	goto	u171
   556  0006DE  EF73  F003         	goto	u170
   557  0006E2                     u171:
   558  0006E2  EFA9  F003         	goto	l878
   559  0006E6                     u170:
   560  0006E6  0E01               	movlw	1
   561  0006E8  6E09               	movwf	___aldiv@counter^0,c
   562  0006EA  EF7D  F003         	goto	l864
   563  0006EE                     l862:
   564  0006EE  90D8               	bcf	status,0,c
   565  0006F0  3605               	rlcf	___aldiv@divisor^0,f,c
   566  0006F2  3606               	rlcf	(___aldiv@divisor+1)^0,f,c
   567  0006F4  3607               	rlcf	(___aldiv@divisor+2)^0,f,c
   568  0006F6  3608               	rlcf	(___aldiv@divisor+3)^0,f,c
   569  0006F8  2A09               	incf	___aldiv@counter^0,f,c
   570  0006FA                     l864:
   571  0006FA  AE08               	btfss	(___aldiv@divisor+3)^0,7,c
   572  0006FC  EF82  F003         	goto	u181
   573  000700  EF84  F003         	goto	u180
   574  000704                     u181:
   575  000704  EF77  F003         	goto	l862
   576  000708                     u180:
   577  000708                     l866:
   578  000708  90D8               	bcf	status,0,c
   579  00070A  360B               	rlcf	___aldiv@quotient^0,f,c
   580  00070C  360C               	rlcf	(___aldiv@quotient+1)^0,f,c
   581  00070E  360D               	rlcf	(___aldiv@quotient+2)^0,f,c
   582  000710  360E               	rlcf	(___aldiv@quotient+3)^0,f,c
   583  000712  5005               	movf	___aldiv@divisor^0,w,c
   584  000714  5C01               	subwf	___aldiv@dividend^0,w,c
   585  000716  5006               	movf	(___aldiv@divisor+1)^0,w,c
   586  000718  5802               	subwfb	(___aldiv@dividend+1)^0,w,c
   587  00071A  5007               	movf	(___aldiv@divisor+2)^0,w,c
   588  00071C  5803               	subwfb	(___aldiv@dividend+2)^0,w,c
   589  00071E  5008               	movf	(___aldiv@divisor+3)^0,w,c
   590  000720  5804               	subwfb	(___aldiv@dividend+3)^0,w,c
   591  000722  A0D8               	btfss	status,0,c
   592  000724  EF96  F003         	goto	u191
   593  000728  EF98  F003         	goto	u190
   594  00072C                     u191:
   595  00072C  EFA1  F003         	goto	l874
   596  000730                     u190:
   597  000730  5005               	movf	___aldiv@divisor^0,w,c
   598  000732  5E01               	subwf	___aldiv@dividend^0,f,c
   599  000734  5006               	movf	(___aldiv@divisor+1)^0,w,c
   600  000736  5A02               	subwfb	(___aldiv@dividend+1)^0,f,c
   601  000738  5007               	movf	(___aldiv@divisor+2)^0,w,c
   602  00073A  5A03               	subwfb	(___aldiv@dividend+2)^0,f,c
   603  00073C  5008               	movf	(___aldiv@divisor+3)^0,w,c
   604  00073E  5A04               	subwfb	(___aldiv@dividend+3)^0,f,c
   605  000740  800B               	bsf	___aldiv@quotient^0,0,c
   606  000742                     l874:
   607  000742  90D8               	bcf	status,0,c
   608  000744  3208               	rrcf	(___aldiv@divisor+3)^0,f,c
   609  000746  3207               	rrcf	(___aldiv@divisor+2)^0,f,c
   610  000748  3206               	rrcf	(___aldiv@divisor+1)^0,f,c
   611  00074A  3205               	rrcf	___aldiv@divisor^0,f,c
   612  00074C  2E09               	decfsz	___aldiv@counter^0,f,c
   613  00074E  EF84  F003         	goto	l866
   614  000752                     l878:
   615  000752  500A               	movf	___aldiv@sign^0,w,c
   616  000754  B4D8               	btfsc	status,2,c
   617  000756  EFAF  F003         	goto	u201
   618  00075A  EFB1  F003         	goto	u200
   619  00075E                     u201:
   620  00075E  EFB9  F003         	goto	l882
   621  000762                     u200:
   622  000762  1E0E               	comf	(___aldiv@quotient+3)^0,f,c
   623  000764  1E0D               	comf	(___aldiv@quotient+2)^0,f,c
   624  000766  1E0C               	comf	(___aldiv@quotient+1)^0,f,c
   625  000768  6C0B               	negf	___aldiv@quotient^0,c
   626  00076A  0E00               	movlw	0
   627  00076C  220C               	addwfc	(___aldiv@quotient+1)^0,f,c
   628  00076E  220D               	addwfc	(___aldiv@quotient+2)^0,f,c
   629  000770  220E               	addwfc	(___aldiv@quotient+3)^0,f,c
   630  000772                     l882:
   631  000772  C00B  F001         	movff	___aldiv@quotient,?___aldiv
   632  000776  C00C  F002         	movff	___aldiv@quotient+1,?___aldiv+1
   633  00077A  C00D  F003         	movff	___aldiv@quotient+2,?___aldiv+2
   634  00077E  C00E  F004         	movff	___aldiv@quotient+3,?___aldiv+3
   635  000782  0012               	return		;funcret
   636  000784                     __end_of___aldiv:
   637                           	callstack 0
   638                           
   639                           	psect	rparam
   640  0000                     
   641                           	psect	idloc
   642                           
   643                           ;Config register IDLOC0 @ 0x200000
   644                           ;	unspecified, using default values
   645  200000                     	org	2097152
   646  200000  FF                 	db	255
   647                           
   648                           ;Config register IDLOC1 @ 0x200001
   649                           ;	unspecified, using default values
   650  200001                     	org	2097153
   651  200001  FF                 	db	255
   652                           
   653                           ;Config register IDLOC2 @ 0x200002
   654                           ;	unspecified, using default values
   655  200002                     	org	2097154
   656  200002  FF                 	db	255
   657                           
   658                           ;Config register IDLOC3 @ 0x200003
   659                           ;	unspecified, using default values
   660  200003                     	org	2097155
   661  200003  FF                 	db	255
   662                           
   663                           ;Config register IDLOC4 @ 0x200004
   664                           ;	unspecified, using default values
   665  200004                     	org	2097156
   666  200004  FF                 	db	255
   667                           
   668                           ;Config register IDLOC5 @ 0x200005
   669                           ;	unspecified, using default values
   670  200005                     	org	2097157
   671  200005  FF                 	db	255
   672                           
   673                           ;Config register IDLOC6 @ 0x200006
   674                           ;	unspecified, using default values
   675  200006                     	org	2097158
   676  200006  FF                 	db	255
   677                           
   678                           ;Config register IDLOC7 @ 0x200007
   679                           ;	unspecified, using default values
   680  200007                     	org	2097159
   681  200007  FF                 	db	255
   682                           
   683                           	psect	config
   684                           
   685                           ;Config register CONFIG1L @ 0x300000
   686                           ;	PLL Prescaler Selection bits
   687                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   688                           ;	System Clock Postscaler Selection bits
   689                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   690                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   691                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   692  300000                     	org	3145728
   693  300000  00                 	db	0
   694                           
   695                           ;Config register CONFIG1H @ 0x300001
   696                           ;	Oscillator Selection bits
   697                           ;	FOSC = XTPLL_XT, XT oscillator, PLL enabled (XTPLL)
   698                           ;	Fail-Safe Clock Monitor Enable bit
   699                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   700                           ;	Internal/External Oscillator Switchover bit
   701                           ;	IESO = OFF, Oscillator Switchover mode disabled
   702  300001                     	org	3145729
   703  300001  02                 	db	2
   704                           
   705                           ;Config register CONFIG2L @ 0x300002
   706                           ;	Power-up Timer Enable bit
   707                           ;	PWRT = OFF, PWRT disabled
   708                           ;	Brown-out Reset Enable bits
   709                           ;	BOR = ON, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   710                           ;	Brown-out Reset Voltage bits
   711                           ;	BORV = 21, 2.1V
   712                           ;	USB Voltage Regulator Enable bit
   713                           ;	VREGEN = OFF, USB voltage regulator disabled
   714  300002                     	org	3145730
   715  300002  1F                 	db	31
   716                           
   717                           ;Config register CONFIG2H @ 0x300003
   718                           ;	Watchdog Timer Enable bit
   719                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   720                           ;	Watchdog Timer Postscale Select bits
   721                           ;	WDTPS = 32768, 1:32768
   722  300003                     	org	3145731
   723  300003  1E                 	db	30
   724                           
   725                           ; Padding undefined space
   726  300004                     	org	3145732
   727  300004  FF                 	db	255
   728                           
   729                           ;Config register CONFIG3H @ 0x300005
   730                           ;	PORTB A/D Enable bit
   731                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   732                           ;	Low-Power Timer 1 Oscillator Enable bit
   733                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   734                           ;	MCLR Pin Enable bit
   735                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   736  300005                     	org	3145733
   737  300005  80                 	db	128
   738                           
   739                           ;Config register CONFIG4L @ 0x300006
   740                           ;	Stack Full/Underflow Reset Enable bit
   741                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
   742                           ;	Single-Supply ICSP Enable bit
   743                           ;	LVP = ON, Single-Supply ICSP enabled
   744                           ;	Boot Block Size Select bit
   745                           ;	BBSIZ = BB1K, 1KW Boot block size
   746                           ;	Extended Instruction Set Enable bit
   747                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   748                           ;	Background Debugger Enable bit
   749                           ;	DEBUG = 0x1, unprogrammed default
   750  300006                     	org	3145734
   751  300006  84                 	db	132
   752                           
   753                           ; Padding undefined space
   754  300007                     	org	3145735
   755  300007  FF                 	db	255
   756                           
   757                           ;Config register CONFIG5L @ 0x300008
   758                           ;	Code Protection bit
   759                           ;	CP0 = OFF, Block 0 (000800-001FFFh) or (001000-001FFFh) is not code-protected
   760                           ;	Code Protection bit
   761                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   762  300008                     	org	3145736
   763  300008  03                 	db	3
   764                           
   765                           ;Config register CONFIG5H @ 0x300009
   766                           ;	Boot Block Code Protection bit
   767                           ;	CPB = OFF, Boot block (000000-0007FFh) or (000000-000FFFh) is not code-protected
   768  300009                     	org	3145737
   769  300009  40                 	db	64
   770                           
   771                           ;Config register CONFIG6L @ 0x30000A
   772                           ;	Write Protection bit
   773                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) or (001000-001FFFh) is not write-protected
   774                           ;	Write Protection bit
   775                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   776  30000A                     	org	3145738
   777  30000A  03                 	db	3
   778                           
   779                           ;Config register CONFIG6H @ 0x30000B
   780                           ;	Configuration Register Write Protection bit
   781                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   782                           ;	Boot Block Write Protection bit
   783                           ;	WRTB = OFF, Boot block (000000-0007FFh) or (000000-000FFFh) is not write-protected
   784  30000B                     	org	3145739
   785  30000B  60                 	db	96
   786                           
   787                           ;Config register CONFIG7L @ 0x30000C
   788                           ;	Table Read Protection bit
   789                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) or (001000-001FFFh) is not protected from table 
      +                          reads executed in other blocks
   790                           ;	Table Read Protection bit
   791                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   792  30000C                     	org	3145740
   793  30000C  03                 	db	3
   794                           
   795                           ;Config register CONFIG7H @ 0x30000D
   796                           ;	Boot Block Table Read Protection bit
   797                           ;	EBTRB = OFF, Boot block (000000-0007FFh) or (000000-000FFFh) is not protected from tab
      +                          le reads executed in other blocks
   798  30000D                     	org	3145741
   799  30000D  40                 	db	64
   800                           tosu	equ	0xFFF
   801                           tosh	equ	0xFFE
   802                           tosl	equ	0xFFD
   803                           stkptr	equ	0xFFC
   804                           pclatu	equ	0xFFB
   805                           pclath	equ	0xFFA
   806                           pcl	equ	0xFF9
   807                           tblptru	equ	0xFF8
   808                           tblptrh	equ	0xFF7
   809                           tblptrl	equ	0xFF6
   810                           tablat	equ	0xFF5
   811                           prodh	equ	0xFF4
   812                           prodl	equ	0xFF3
   813                           indf0	equ	0xFEF
   814                           postinc0	equ	0xFEE
   815                           postdec0	equ	0xFED
   816                           preinc0	equ	0xFEC
   817                           plusw0	equ	0xFEB
   818                           fsr0h	equ	0xFEA
   819                           fsr0l	equ	0xFE9
   820                           wreg	equ	0xFE8
   821                           indf1	equ	0xFE7
   822                           postinc1	equ	0xFE6
   823                           postdec1	equ	0xFE5
   824                           preinc1	equ	0xFE4
   825                           plusw1	equ	0xFE3
   826                           fsr1h	equ	0xFE2
   827                           fsr1l	equ	0xFE1
   828                           bsr	equ	0xFE0
   829                           indf2	equ	0xFDF
   830                           postinc2	equ	0xFDE
   831                           postdec2	equ	0xFDD
   832                           preinc2	equ	0xFDC
   833                           plusw2	equ	0xFDB
   834                           fsr2h	equ	0xFDA
   835                           fsr2l	equ	0xFD9
   836                           status	equ	0xFD8

Data Sizes:
    Strings     23
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     32      32
    BANK0           160      0       0
    BANK1           256      0       0
    BANK4           256      0       0

Pointer List with Targets:

    main@mensaje	PTR unsigned char  size(2) Largest target is 13
		 -> STR_7(CODE[13]), 

    main@caract_6	PTR unsigned char  size(2) Largest target is 2
		 -> STR_6(CODE[2]), 

    main@caract_5	PTR unsigned char  size(2) Largest target is 2
		 -> STR_5(CODE[2]), 

    main@caract_4	PTR unsigned char  size(2) Largest target is 2
		 -> STR_4(CODE[2]), 

    main@caract_3	PTR unsigned char  size(2) Largest target is 2
		 -> STR_3(CODE[2]), 

    main@caract_2	PTR unsigned char  size(2) Largest target is 2
		 -> STR_2(CODE[2]), 

    main@caract_1	PTR unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->___aldiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0     811
                                             14 COMRAM    18    18      0
                            ___aldiv
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8     604
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___aldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     20      20       1       33.7%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK4           100      0       0       7        0.0%
BANK4              100      0       0       8        0.0%
BITBIGSFRhhhh       3E      0       0       9        0.0%
BITBIGSFRhhhl        8      0       0      10        0.0%
BITBIGSFRhhlh        7      0       0      11        0.0%
BITBIGSFRhhll        1      0       0      12        0.0%
BITBIGSFRhl         16      0       0      13        0.0%
BITBIGSFRl          34      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BIGRAM_1           100      0       0      16        0.0%
BIGRAM             1FF      0       0      17        0.0%
DATA                 0      0       0      18        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Nov 21 19:35:04 2022

                     l40 05B0                       l43 05CC                       l52 0620  
                     l46 05E8                       l55 063C                       l49 0604  
                    l142 0782                      l900 051E                      l910 057C  
                    l902 0520                      l920 05A0                      l912 0580  
                    l904 052E                      l850 069E                      l842 0678  
                    l930 0612                      l922 05A8                      l914 0588  
                    l906 0538                      l860 06E6                      l852 06AC  
                    l844 067C                      l932 062E                      l924 05BE  
                    l916 0590                      l908 0578                      l870 0730  
                    l862 06EE                      l854 06BC                      l846 068A  
                    l934 064A                      l926 05DA                      l918 0598  
                    l880 0762                      l872 0740                      l864 06FA  
                    l856 06C0                      l848 069A                      l936 0658  
                    l928 05F6                      l882 0772                      l874 0742  
                    l866 0708                      l858 06D0                      l938 0670  
                    l876 074C                      l868 0712                      l878 0752  
                    l898 051A                      u200 0762                      u201 075E  
                    u210 05BE                      u211 05BA                      u220 05DA  
                    u221 05D6                      u150 068A                      u230 05F6  
                    u151 0686                      u231 05F2                      u160 06AC  
                    u240 0612                      u161 06A8                      u241 060E  
                    u170 06E6                      u250 062E                      u171 06E2  
                    u251 062A                      u180 0708                      u260 064A  
                    u181 0704                      u261 0646                      u190 0730  
                    u191 072C                      u277 0662                      wreg 000FE8  
                   STR_1 0512                     STR_2 0516                     STR_3 0514  
                   STR_4 0510                     STR_5 050E                     STR_6 050C  
                   STR_7 0501                     _main 051A                     start 0000  
           main@caract_1 0013             main@caract_2 0015             main@caract_3 0017  
           main@caract_4 0019             main@caract_5 001B             main@caract_6 001D  
           ___param_bank 000000          __end_of___aldiv 0784                    ?_main 0001  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _TXREG 000FAD  
                  _TXSTA 000FAC                    tablat 000FF5                    status 000FD8  
        __initialization 0784            main@baud_rate 001F             __end_of_main 0678  
                 ??_main 000F            __activetblptr 000001        main@baud_desaired 0011  
                 _SPBRGH 000FB0                ??___aldiv 0009                   isa$std 000001  
           __mediumconst 0000                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0060  __end_of__initialization 0784  
          ___rparam_used 000001           __pcstackCOMRAM 0001                  _BAUDCON 000FB8  
                __Hparam 0000                  __Lparam 0000                  ___aldiv 0678  
           __psmallconst 0500                  __pcinit 0784                  __ramtop 0500  
                __ptext0 051A                  __ptext1 0678         ___aldiv@dividend 0001  
   end_of_initialization 0784         ___aldiv@quotient 000B                _TRISCbits 000F94  
              _TXSTAbits 000FAC              _BAUDCONbits 000FB8      start_initialization 0784  
               ?___aldiv 0001              __smallconst 0500          ___aldiv@divisor 0005  
        ___aldiv@counter 0009               _ADCON1bits 000FC1                 __Hrparam 0000  
               __Lrparam 0000             __Lsmallconst 0500                 isa$xinst 000000  
           ___aldiv@sign 000A  
