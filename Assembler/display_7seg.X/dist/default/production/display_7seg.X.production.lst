

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Oct 31 17:38:53 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F2450
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    17  0000                     
    18                           ; Version 2.40
    19                           ; Generated 17/11/2021 GMT
    20                           ; 
    21                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18F2450 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     
    54                           	psect	idataCOMRAM
    55  003EDE                     __pidataCOMRAM:
    56                           	callstack 0
    57                           
    58                           ;initializer for _ac_vector
    59  003EDE  81                 	db	129
    60  003EDF  CF                 	db	207
    61  003EE0  92                 	db	146
    62  003EE1  86                 	db	134
    63  003EE2  CC                 	db	204
    64  003EE3  A4                 	db	164
    65  003EE4  A0                 	db	160
    66  003EE5  8F                 	db	143
    67  003EE6  80                 	db	128
    68  003EE7  8C                 	db	140
    69  003EE8  88                 	db	136
    70  003EE9  E0                 	db	224
    71  003EEA  B1                 	db	177
    72  003EEB  C2                 	db	194
    73  003EEC  B0                 	db	176
    74  003EED  B8                 	db	184
    75  003EEE  FA                 	db	250
    76                           
    77                           ;initializer for _error
    78  003EEF  FA                 	db	250
    79  0000                     _PORTA	set	3968
    80  0000                     _TRISB	set	3987
    81  0000                     _ADCON1bits	set	4033
    82  0000                     _PORTE	set	3972
    83  0000                     _PORTC	set	3970
    84  0000                     _PORTB	set	3969
    85                           
    86                           ; #config settings
    87                           
    88                           	psect	cinit
    89  003F18                     __pcinit:
    90                           	callstack 0
    91  003F18                     start_initialization:
    92                           	callstack 0
    93  003F18                     __initialization:
    94                           	callstack 0
    95                           
    96                           ; Initialize objects allocated to COMRAM (18 bytes)
    97                           ; load TBLPTR registers with __pidataCOMRAM
    98  003F18  0EDE               	movlw	low __pidataCOMRAM
    99  003F1A  6EF6               	movwf	tblptrl,c
   100  003F1C  0E3E               	movlw	high __pidataCOMRAM
   101  003F1E  6EF7               	movwf	tblptrh,c
   102  003F20  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   103  003F22  6EF8               	movwf	tblptru,c
   104  003F24  EE00  F001         	lfsr	0,__pdataCOMRAM
   105  003F28  EE10 F012          	lfsr	1,18
   106  003F2C                     copy_data0:
   107  003F2C  0009               	tblrd		*+
   108  003F2E  CFF5 FFEE          	movff	tablat,postinc0
   109  003F32  50E5               	movf	postdec1,w,c
   110  003F34  50E1               	movf	fsr1l,w,c
   111  003F36  E1FA               	bnz	copy_data0
   112                           
   113                           ; Clear objects allocated to COMRAM (1 bytes)
   114  003F38  6A1C               	clrf	__pbssCOMRAM& (0+255),c
   115  003F3A                     end_of_initialization:
   116                           	callstack 0
   117  003F3A                     __end_of__initialization:
   118                           	callstack 0
   119  003F3A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   120  003F3C  6EF8               	movwf	tblptru,c
   121  003F3E  0100               	movlb	0
   122  003F40  EFA2  F01F         	goto	_main	;jump to C main() function
   123                           
   124                           	psect	bssCOMRAM
   125  00001C                     __pbssCOMRAM:
   126                           	callstack 0
   127  00001C                     _num:
   128                           	callstack 0
   129  00001C                     	ds	1
   130                           
   131                           	psect	dataCOMRAM
   132  000001                     __pdataCOMRAM:
   133                           	callstack 0
   134  000001                     _ac_vector:
   135                           	callstack 0
   136  000001                     	ds	17
   137  000012                     _error:
   138                           	callstack 0
   139  000012                     	ds	1
   140                           
   141                           	psect	cstackCOMRAM
   142  000013                     __pcstackCOMRAM:
   143                           	callstack 0
   144  000013                     to_7seg@hex:
   145                           	callstack 0
   146                           
   147                           ; 1 bytes @ 0x0
   148  000013                     	ds	1
   149  000014                     print_7seg@num:
   150                           	callstack 0
   151                           
   152                           ; 1 bytes @ 0x1
   153  000014                     	ds	1
   154  000015                     ??_print_7seg:
   155                           
   156                           ; 1 bytes @ 0x2
   157  000015                     	ds	2
   158  000017                     print_7seg@port:
   159                           	callstack 0
   160                           
   161                           ; 1 bytes @ 0x4
   162  000017                     	ds	1
   163  000018                     print_7seg@caracter:
   164                           	callstack 0
   165                           
   166                           ; 1 bytes @ 0x5
   167  000018                     	ds	1
   168  000019                     ??_main:
   169                           
   170                           ; 1 bytes @ 0x6
   171  000019                     	ds	2
   172  00001B                     main@cont:
   173                           	callstack 0
   174                           
   175                           ; 1 bytes @ 0x8
   176  00001B                     	ds	1
   177                           
   178 ;;
   179 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   180 ;;
   181 ;; *************** function _main *****************
   182 ;; Defined at:
   183 ;;		line 78 in file "main.c"
   184 ;; Parameters:    Size  Location     Type
   185 ;;		None
   186 ;; Auto vars:     Size  Location     Type
   187 ;;  cont            1    8[COMRAM] unsigned char 
   188 ;; Return value:  Size  Location     Type
   189 ;;                  1    wreg      void 
   190 ;; Registers used:
   191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   192 ;; Tracked objects:
   193 ;;		On entry : 0/0
   194 ;;		On exit  : 0/0
   195 ;;		Unchanged: 0/0
   196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
   197 ;;      Params:         0       0       0       0
   198 ;;      Locals:         1       0       0       0
   199 ;;      Temps:          2       0       0       0
   200 ;;      Totals:         3       0       0       0
   201 ;;Total ram usage:        3 bytes
   202 ;; Hardware stack levels required when called: 2
   203 ;; This function calls:
   204 ;;		_print_7seg
   205 ;; This function is called by:
   206 ;;		Startup code after reset
   207 ;; This function uses a non-reentrant model
   208 ;;
   209                           
   210                           	psect	text0
   211  003F44                     __ptext0:
   212                           	callstack 0
   213  003F44                     _main:
   214                           	callstack 29
   215  003F44                     
   216                           ;main.c: 81:     ADCON1bits.PCFG = 0b1111;
   217  003F44  0E0F               	movlw	15
   218  003F46  12C1               	iorwf	193,f,c	;volatile
   219                           
   220                           ;main.c: 83:     TRISB = 0b00000000;
   221  003F48  0E00               	movlw	0
   222  003F4A  6E93               	movwf	147,c	;volatile
   223                           
   224                           ;main.c: 84:     uint8_t cont = 0;
   225  003F4C  0E00               	movlw	0
   226  003F4E  6E1B               	movwf	main@cont^0,c
   227  003F50                     l766:
   228                           
   229                           ;main.c: 86:         print_7seg('B', cont);
   230  003F50  C01B  F014         	movff	main@cont,print_7seg@num
   231  003F54  0E42               	movlw	66
   232  003F56  ECC7  F01F         	call	_print_7seg
   233  003F5A                     
   234                           ;main.c: 88:         _delay((unsigned long)((1000)*(4000000/4000.0)));
   235  003F5A  0E06               	movlw	6
   236  003F5C  6E1A               	movwf	(??_main+1)^0,c
   237  003F5E  0E13               	movlw	19
   238  003F60  6E19               	movwf	??_main^0,c
   239  003F62  0EAE               	movlw	174
   240  003F64                     u47:
   241  003F64  2EE8               	decfsz	wreg,f,c
   242  003F66  D7FE               	bra	u47
   243  003F68  2E19               	decfsz	??_main^0,f,c
   244  003F6A  D7FC               	bra	u47
   245  003F6C  2E1A               	decfsz	(??_main+1)^0,f,c
   246  003F6E  D7FA               	bra	u47
   247  003F70                     
   248                           ;main.c: 89:         cont++;
   249  003F70  2A1B               	incf	main@cont^0,f,c
   250  003F72                     
   251                           ;main.c: 91:         if(cont > 15)
   252  003F72  0E0F               	movlw	15
   253  003F74  641B               	cpfsgt	main@cont^0,c
   254  003F76  EFBF  F01F         	goto	u31
   255  003F7A  EFC1  F01F         	goto	u30
   256  003F7E                     u31:
   257  003F7E  EFA8  F01F         	goto	l766
   258  003F82                     u30:
   259  003F82                     
   260                           ;main.c: 92:             cont = 0;
   261  003F82  0E00               	movlw	0
   262  003F84  6E1B               	movwf	main@cont^0,c
   263  003F86  EFA8  F01F         	goto	l766
   264  003F8A  EF00  F000         	goto	start
   265  003F8E                     __end_of_main:
   266                           	callstack 0
   267                           
   268 ;; *************** function _print_7seg *****************
   269 ;; Defined at:
   270 ;;		line 22 in file "display_7seg.c"
   271 ;; Parameters:    Size  Location     Type
   272 ;;  port            1    wreg     unsigned char 
   273 ;;  num             1    1[COMRAM] unsigned char 
   274 ;; Auto vars:     Size  Location     Type
   275 ;;  port            1    4[COMRAM] unsigned char 
   276 ;;  caracter        1    5[COMRAM] unsigned char 
   277 ;; Return value:  Size  Location     Type
   278 ;;                  1    wreg      void 
   279 ;; Registers used:
   280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   281 ;; Tracked objects:
   282 ;;		On entry : 0/0
   283 ;;		On exit  : 0/0
   284 ;;		Unchanged: 0/0
   285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
   286 ;;      Params:         1       0       0       0
   287 ;;      Locals:         2       0       0       0
   288 ;;      Temps:          2       0       0       0
   289 ;;      Totals:         5       0       0       0
   290 ;;Total ram usage:        5 bytes
   291 ;; Hardware stack levels used: 1
   292 ;; Hardware stack levels required when called: 1
   293 ;; This function calls:
   294 ;;		_to_7seg
   295 ;; This function is called by:
   296 ;;		_main
   297 ;; This function uses a non-reentrant model
   298 ;;
   299                           
   300                           	psect	text1
   301  003F8E                     __ptext1:
   302                           	callstack 0
   303  003F8E                     _print_7seg:
   304                           	callstack 29
   305                           
   306                           ;incstack = 0
   307                           ;print_7seg@port stored from wreg
   308  003F8E  6E17               	movwf	print_7seg@port^0,c
   309  003F90                     
   310                           ;display_7seg.c: 22: void print_7seg(uint8_t port, uint8_t num);display_7seg.c: 23: {;di
      +                          splay_7seg.c: 24:     char7seg caracter = to_7seg(num);
   311  003F90  5014               	movf	print_7seg@num^0,w,c
   312  003F92  EC78  F01F         	call	_to_7seg
   313  003F96  6E18               	movwf	print_7seg@caracter^0,c
   314                           
   315                           ;display_7seg.c: 26:     switch(port)
   316  003F98  EFDE  F01F         	goto	l758
   317  003F9C                     l39:
   318                           
   319                           ;display_7seg.c: 29:             PORTA = caracter;
   320  003F9C  C018  FF80         	movff	print_7seg@caracter,3968	;volatile
   321                           
   322                           ;display_7seg.c: 30:             break;
   323  003FA0  EFFF  F01F         	goto	l46
   324  003FA4                     l41:
   325                           
   326                           ;display_7seg.c: 32:             PORTB = caracter;
   327  003FA4  C018  FF81         	movff	print_7seg@caracter,3969	;volatile
   328                           
   329                           ;display_7seg.c: 33:             break;
   330  003FA8  EFFF  F01F         	goto	l46
   331  003FAC                     l42:
   332                           
   333                           ;display_7seg.c: 35:             PORTC = caracter;
   334  003FAC  C018  FF82         	movff	print_7seg@caracter,3970	;volatile
   335                           
   336                           ;display_7seg.c: 36:             break;
   337  003FB0  EFFF  F01F         	goto	l46
   338  003FB4                     l44:
   339                           
   340                           ;display_7seg.c: 41:             PORTE = caracter;
   341  003FB4  C018  FF84         	movff	print_7seg@caracter,3972	;volatile
   342                           
   343                           ;display_7seg.c: 42:             break;
   344  003FB8  EFFF  F01F         	goto	l46
   345  003FBC                     l758:
   346  003FBC  5017               	movf	print_7seg@port^0,w,c
   347  003FBE  6E15               	movwf	??_print_7seg^0,c
   348  003FC0  6A16               	clrf	(??_print_7seg+1)^0,c
   349                           
   350                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   351                           ; Switch size 1, requested type "simple"
   352                           ; Number of cases is 1, Range of values is 0 to 0
   353                           ; switch strategies available:
   354                           ; Name         Instructions Cycles
   355                           ; simple_byte            4     3 (average)
   356                           ;	Chosen strategy is simple_byte
   357  003FC2  5016               	movf	(??_print_7seg+1)^0,w,c
   358  003FC4  0A00               	xorlw	0	; case 0
   359  003FC6  B4D8               	btfsc	status,2,c
   360  003FC8  EFE8  F01F         	goto	l780
   361  003FCC  EFD2  F01F         	goto	l41
   362  003FD0                     l780:
   363                           
   364                           ; Switch size 1, requested type "simple"
   365                           ; Number of cases is 5, Range of values is 65 to 69
   366                           ; switch strategies available:
   367                           ; Name         Instructions Cycles
   368                           ; simple_byte           16     9 (average)
   369                           ;	Chosen strategy is simple_byte
   370  003FD0  5015               	movf	??_print_7seg^0,w,c
   371  003FD2  0A41               	xorlw	65	; case 65
   372  003FD4  B4D8               	btfsc	status,2,c
   373  003FD6  EFCE  F01F         	goto	l39
   374  003FDA  0A03               	xorlw	3	; case 66
   375  003FDC  B4D8               	btfsc	status,2,c
   376  003FDE  EFD2  F01F         	goto	l41
   377  003FE2  0A01               	xorlw	1	; case 67
   378  003FE4  B4D8               	btfsc	status,2,c
   379  003FE6  EFD6  F01F         	goto	l42
   380  003FEA  0A07               	xorlw	7	; case 68
   381  003FEC  B4D8               	btfsc	status,2,c
   382  003FEE  EFFF  F01F         	goto	l46
   383  003FF2  0A01               	xorlw	1	; case 69
   384  003FF4  B4D8               	btfsc	status,2,c
   385  003FF6  EFDA  F01F         	goto	l44
   386  003FFA  EFD2  F01F         	goto	l41
   387  003FFE                     l46:
   388  003FFE  0012               	return		;funcret
   389  004000                     __end_of_print_7seg:
   390                           	callstack 0
   391                           
   392 ;; *************** function _to_7seg *****************
   393 ;; Defined at:
   394 ;;		line 12 in file "display_7seg.c"
   395 ;; Parameters:    Size  Location     Type
   396 ;;  hex             1    wreg     unsigned char 
   397 ;; Auto vars:     Size  Location     Type
   398 ;;  hex             1    0[COMRAM] unsigned char 
   399 ;; Return value:  Size  Location     Type
   400 ;;                  1    wreg      unsigned char 
   401 ;; Registers used:
   402 ;;		wreg, fsr2l, fsr2h, status,2, status,0
   403 ;; Tracked objects:
   404 ;;		On entry : 0/0
   405 ;;		On exit  : 0/0
   406 ;;		Unchanged: 0/0
   407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK4
   408 ;;      Params:         0       0       0       0
   409 ;;      Locals:         1       0       0       0
   410 ;;      Temps:          0       0       0       0
   411 ;;      Totals:         1       0       0       0
   412 ;;Total ram usage:        1 bytes
   413 ;; Hardware stack levels used: 1
   414 ;; This function calls:
   415 ;;		Nothing
   416 ;; This function is called by:
   417 ;;		_print_7seg
   418 ;; This function uses a non-reentrant model
   419 ;;
   420                           
   421                           	psect	text2
   422  003EF0                     __ptext2:
   423                           	callstack 0
   424  003EF0                     _to_7seg:
   425                           	callstack 29
   426                           
   427                           ;incstack = 0
   428                           ;to_7seg@hex stored from wreg
   429  003EF0  6E13               	movwf	to_7seg@hex^0,c
   430  003EF2                     
   431                           ;display_7seg.c: 12: static char7seg to_7seg(uint8_t hex);display_7seg.c: 13: {;display_
      +                          7seg.c: 15:     if (sizeof(ac_vector)/sizeof(ac_vector[0]) <= hex)
   432  003EF2  0E10               	movlw	16
   433  003EF4  6413               	cpfsgt	to_7seg@hex^0,c
   434  003EF6  EF7F  F01F         	goto	u11
   435  003EFA  EF81  F01F         	goto	u10
   436  003EFE                     u11:
   437  003EFE  EF84  F01F         	goto	l728
   438  003F02                     u10:
   439  003F02                     
   440                           ;display_7seg.c: 16:     {;display_7seg.c: 17:         return error;
   441  003F02  5012               	movf	_error^0,w,c
   442  003F04  EF8B  F01F         	goto	l35
   443  003F08                     l728:
   444                           
   445                           ;display_7seg.c: 19:     return ac_vector[hex];
   446  003F08  0E01               	movlw	low _ac_vector
   447  003F0A  2413               	addwf	to_7seg@hex^0,w,c
   448  003F0C  6ED9               	movwf	fsr2l,c
   449  003F0E  6ADA               	clrf	fsr2h,c
   450  003F10  0E00               	movlw	high _ac_vector
   451  003F12  22DA               	addwfc	fsr2h,f,c
   452  003F14  50DF               	movf	indf2,w,c
   453  003F16                     l35:
   454  003F16  0012               	return		;funcret
   455  003F18                     __end_of_to_7seg:
   456                           	callstack 0
   457  0000                     
   458                           	psect	rparam
   459  0000                     
   460                           	psect	idloc
   461                           
   462                           ;Config register IDLOC0 @ 0x200000
   463                           ;	unspecified, using default values
   464  200000                     	org	2097152
   465  200000  FF                 	db	255
   466                           
   467                           ;Config register IDLOC1 @ 0x200001
   468                           ;	unspecified, using default values
   469  200001                     	org	2097153
   470  200001  FF                 	db	255
   471                           
   472                           ;Config register IDLOC2 @ 0x200002
   473                           ;	unspecified, using default values
   474  200002                     	org	2097154
   475  200002  FF                 	db	255
   476                           
   477                           ;Config register IDLOC3 @ 0x200003
   478                           ;	unspecified, using default values
   479  200003                     	org	2097155
   480  200003  FF                 	db	255
   481                           
   482                           ;Config register IDLOC4 @ 0x200004
   483                           ;	unspecified, using default values
   484  200004                     	org	2097156
   485  200004  FF                 	db	255
   486                           
   487                           ;Config register IDLOC5 @ 0x200005
   488                           ;	unspecified, using default values
   489  200005                     	org	2097157
   490  200005  FF                 	db	255
   491                           
   492                           ;Config register IDLOC6 @ 0x200006
   493                           ;	unspecified, using default values
   494  200006                     	org	2097158
   495  200006  FF                 	db	255
   496                           
   497                           ;Config register IDLOC7 @ 0x200007
   498                           ;	unspecified, using default values
   499  200007                     	org	2097159
   500  200007  FF                 	db	255
   501                           
   502                           	psect	config
   503                           
   504                           ;Config register CONFIG1L @ 0x300000
   505                           ;	PLL Prescaler Selection bits
   506                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
   507                           ;	System Clock Postscaler Selection bits
   508                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
   509                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
   510                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
   511  300000                     	org	3145728
   512  300000  00                 	db	0
   513                           
   514                           ;Config register CONFIG1H @ 0x300001
   515                           ;	Oscillator Selection bits
   516                           ;	FOSC = INTOSC_XT, Internal oscillator, XT used by USB (INTXT)
   517                           ;	Fail-Safe Clock Monitor Enable bit
   518                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   519                           ;	Internal/External Oscillator Switchover bit
   520                           ;	IESO = OFF, Oscillator Switchover mode disabled
   521  300001                     	org	3145729
   522  300001  0A                 	db	10
   523                           
   524                           ;Config register CONFIG2L @ 0x300002
   525                           ;	Power-up Timer Enable bit
   526                           ;	PWRT = OFF, PWRT disabled
   527                           ;	Brown-out Reset Enable bits
   528                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
   529                           ;	Brown-out Reset Voltage bits
   530                           ;	BORV = 21, 2.1V
   531                           ;	USB Voltage Regulator Enable bit
   532                           ;	VREGEN = OFF, USB voltage regulator disabled
   533  300002                     	org	3145730
   534  300002  19                 	db	25
   535                           
   536                           ;Config register CONFIG2H @ 0x300003
   537                           ;	Watchdog Timer Enable bit
   538                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
   539                           ;	Watchdog Timer Postscale Select bits
   540                           ;	WDTPS = 32768, 1:32768
   541  300003                     	org	3145731
   542  300003  1E                 	db	30
   543                           
   544                           ; Padding undefined space
   545  300004                     	org	3145732
   546  300004  FF                 	db	255
   547                           
   548                           ;Config register CONFIG3H @ 0x300005
   549                           ;	PORTB A/D Enable bit
   550                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
   551                           ;	Low-Power Timer 1 Oscillator Enable bit
   552                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   553                           ;	MCLR Pin Enable bit
   554                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
   555  300005                     	org	3145733
   556  300005  80                 	db	128
   557                           
   558                           ;Config register CONFIG4L @ 0x300006
   559                           ;	Stack Full/Underflow Reset Enable bit
   560                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
   561                           ;	Single-Supply ICSP Enable bit
   562                           ;	LVP = OFF, Single-Supply ICSP disabled
   563                           ;	Boot Block Size Select bit
   564                           ;	BBSIZ = BB1K, 1KW Boot block size
   565                           ;	Extended Instruction Set Enable bit
   566                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   567                           ;	Background Debugger Enable bit
   568                           ;	DEBUG = 0x1, unprogrammed default
   569  300006                     	org	3145734
   570  300006  80                 	db	128
   571                           
   572                           ; Padding undefined space
   573  300007                     	org	3145735
   574  300007  FF                 	db	255
   575                           
   576                           ;Config register CONFIG5L @ 0x300008
   577                           ;	Code Protection bit
   578                           ;	CP0 = OFF, Block 0 (000800-001FFFh) or (001000-001FFFh) is not code-protected
   579                           ;	Code Protection bit
   580                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
   581  300008                     	org	3145736
   582  300008  03                 	db	3
   583                           
   584                           ;Config register CONFIG5H @ 0x300009
   585                           ;	Boot Block Code Protection bit
   586                           ;	CPB = OFF, Boot block (000000-0007FFh) or (000000-000FFFh) is not code-protected
   587  300009                     	org	3145737
   588  300009  40                 	db	64
   589                           
   590                           ;Config register CONFIG6L @ 0x30000A
   591                           ;	Write Protection bit
   592                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) or (001000-001FFFh) is not write-protected
   593                           ;	Write Protection bit
   594                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
   595  30000A                     	org	3145738
   596  30000A  03                 	db	3
   597                           
   598                           ;Config register CONFIG6H @ 0x30000B
   599                           ;	Configuration Register Write Protection bit
   600                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
   601                           ;	Boot Block Write Protection bit
   602                           ;	WRTB = OFF, Boot block (000000-0007FFh) or (000000-000FFFh) is not write-protected
   603  30000B                     	org	3145739
   604  30000B  60                 	db	96
   605                           
   606                           ;Config register CONFIG7L @ 0x30000C
   607                           ;	Table Read Protection bit
   608                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) or (001000-001FFFh) is not protected from table 
      +                          reads executed in other blocks
   609                           ;	Table Read Protection bit
   610                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
   611  30000C                     	org	3145740
   612  30000C  03                 	db	3
   613                           
   614                           ;Config register CONFIG7H @ 0x30000D
   615                           ;	Boot Block Table Read Protection bit
   616                           ;	EBTRB = OFF, Boot block (000000-0007FFh) or (000000-000FFFh) is not protected from tab
      +                          le reads executed in other blocks
   617  30000D                     	org	3145741
   618  30000D  40                 	db	64
   619                           tosu	equ	0xFFF
   620                           tosh	equ	0xFFE
   621                           tosl	equ	0xFFD
   622                           stkptr	equ	0xFFC
   623                           pclatu	equ	0xFFB
   624                           pclath	equ	0xFFA
   625                           pcl	equ	0xFF9
   626                           tblptru	equ	0xFF8
   627                           tblptrh	equ	0xFF7
   628                           tblptrl	equ	0xFF6
   629                           tablat	equ	0xFF5
   630                           prodh	equ	0xFF4
   631                           prodl	equ	0xFF3
   632                           indf0	equ	0xFEF
   633                           postinc0	equ	0xFEE
   634                           postdec0	equ	0xFED
   635                           preinc0	equ	0xFEC
   636                           plusw0	equ	0xFEB
   637                           fsr0h	equ	0xFEA
   638                           fsr0l	equ	0xFE9
   639                           wreg	equ	0xFE8
   640                           indf1	equ	0xFE7
   641                           postinc1	equ	0xFE6
   642                           postdec1	equ	0xFE5
   643                           preinc1	equ	0xFE4
   644                           plusw1	equ	0xFE3
   645                           fsr1h	equ	0xFE2
   646                           fsr1l	equ	0xFE1
   647                           bsr	equ	0xFE0
   648                           indf2	equ	0xFDF
   649                           postinc2	equ	0xFDE
   650                           postdec2	equ	0xFDD
   651                           preinc2	equ	0xFDC
   652                           plusw2	equ	0xFDB
   653                           fsr2h	equ	0xFDA
   654                           fsr2l	equ	0xFD9
   655                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        18
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      9      28
    BANK0           160      0       0
    BANK1           256      0       0
    BANK4           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_print_7seg
    _print_7seg->_to_7seg

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK4

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     308
                                              6 COMRAM     3     3      0
                         _print_7seg
 ---------------------------------------------------------------------------------
 (1) _print_7seg                                           5     4      1     261
                                              1 COMRAM     5     4      1
                            _to_7seg
 ---------------------------------------------------------------------------------
 (2) _to_7seg                                              1     1      0      30
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _print_7seg
     _to_7seg

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      16        0.0%
BITBANK4           100      0       0       7        0.0%
BANK4              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BIGRAM_1           100      0       0      15        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      9      1C       1       29.5%
BITBIGSFRh          3E      0       0       9        0.0%
BITBIGSFRlh         2D      0       0      10        0.0%
BITBIGSFRlll        20      0       0      13        0.0%
BITBIGSFRllhh        E      0       0      11        0.0%
BITBIGSFRllhl        1      0       0      12        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1C      14        0.0%
DATA                 0      0      1C      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Oct 31 17:38:53 2022

                     l41 3FA4                       l42 3FAC                       l35 3F16  
                     l44 3FB4                       l46 3FFE                       l39 3F9C  
                     u10 3F02                       u11 3EFE                       u30 3F82  
                     u31 3F7E                       u47 3F64                      l722 3EF2  
                    l724 3F02                      l728 3F08                      l770 3F70  
                    l780 3FD0                      l756 3F90                      l772 3F72  
                    l764 3F44                      l758 3FBC                      l774 3F82  
                    l766 3F50                      l768 3F5A                      _num 001C  
          print_7seg@num 0014                      wreg 000FE8                     _main 3F44  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
         print_7seg@port 0017                     start 0000             ___param_bank 000000  
                  ?_main 0013                    _PORTA 000F80                    _PORTB 000F81  
                  _PORTC 000F82                    _PORTE 000F84                    _TRISB 000F93  
                  _error 0012          __end_of_to_7seg 3F18                    tablat 000FF5  
                  status 000FD8          __initialization 3F18             __end_of_main 3F8E  
                 ??_main 0019            __activetblptr 000002                   isa$std 000001  
           __pdataCOMRAM 0001                ??_to_7seg 0013                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0060  
__end_of__initialization 3F3A            ___rparam_used 000001           __pcstackCOMRAM 0013  
                __Hparam 0000                  __Lparam 0000                  __pcinit 3F18  
                __ramtop 0500                  __ptext0 3F44                  __ptext1 3F8E  
                __ptext2 3EF0                  _to_7seg 3EF0     end_of_initialization 3F3A  
          __Lmediumconst 0000                  postdec1 000FE5                  postinc0 000FEE  
             _print_7seg 3F8E            __pidataCOMRAM 3EDE      start_initialization 3F18  
            ?_print_7seg 0014              __pbssCOMRAM 001C                _ac_vector 0001  
             to_7seg@hex 0013                 ?_to_7seg 0013               _ADCON1bits 000FC1  
              copy_data0 3F2C                 __Hrparam 0000                 __Lrparam 0000  
               isa$xinst 000000       print_7seg@caracter 0018                 main@cont 001B  
           ??_print_7seg 0015       __end_of_print_7seg 4000  
